#!/usr/bin/python

# Copyright 2012 Jake Basile
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from reap.commands.admin import *
from reap.api.admin import Project

# Parser Declarations
parser = argparse.ArgumentParser(
    description = 'A command line interface for the Harvest admin interface.'
)
subparsers = parser.add_subparsers()

# List People
list_people_parser = subparsers.add_parser(
    'list-people',
    help = 'Lists all people on the account.'
)
list_people_parser.set_defaults(func = list_people)

# Create Person
create_person_parser = subparsers.add_parser(
    'create-person',
    help = 'Creates a new person.',
)
create_person_parser.add_argument('firstname', help = 'The person\'s first name.')
create_person_parser.add_argument('lastname', help = 'The person\'s last name.')
create_person_parser.add_argument('email', help = 'The person\'s email address.')
create_person_parser.add_argument('--admin', '-a', help = 'Makes the person an admin.', action = 'store_true')
create_person_parser.add_argument('--contractor', '-c', help = 'Makes the person a contractor.', action = 'store_true')
create_person_parser.add_argument('--department', '-d', help = 'Sets this person\'s department.')
create_person_parser.add_argument('--rate', '-r', help = 'Sets this person\'s default rate.', type = float)
create_person_parser.set_defaults(func = create_person)

# Delete Person
delete_person_parser = subparsers.add_parser(
    'delete-person',
    help = 'Deletes a person. There is no undo.'
)
delete_person_parser.add_argument('personid', help = 'The person\'s ID.', type = int)
delete_person_parser.set_defaults(func = delete_person)

# List Clients
list_clients_parser = subparsers.add_parser(
    'list-clients',
    help = 'Lists all clients on the account',
)
list_clients_parser.set_defaults(func = list_clients)

# List Projects
list_projects_parser = subparsers.add_parser(
    'list-projects',
    help = 'Lists all projects on the account.'
)
list_projects_parser.set_defaults(func = list_projects)

# Create Project
create_project_parser = subparsers.add_parser(
    'create-project',
    help = 'Creates a project for the given client.'
)
create_project_parser.add_argument('clientid', help = 'The Client ID to create the project under.', type = int)
create_project_parser.add_argument('name', help = 'The name of the project.')
create_project_parser.add_argument('--note', '-n', help = 'Notes on the project.')
create_project_parser.add_argument('--budget', '-b', help = 'The project\'s budget.', type = float)
create_project_parser.add_argument('--budgetby', '-y', help = 'The project\'s budget method.', choices = Project.BUDGET_BY_TYPE)
create_project_parser.set_defaults(func = create_project)

# Delete Project
delete_project_parser = subparsers.add_parser(
    'delete-project',
    help = 'Deletes a project.'
)
delete_project_parser.add_argument('projectid', help = 'The project\'s ID.', type = int)
delete_project_parser.set_defaults(func = delete_project)

# Hours Report
hours_report_parser = subparsers.add_parser(
    'hours-report',
    help = 'Generates a report on a particular user\'s hours.'
)
hours_report_parser.add_argument('personid', help = 'The ID of the person on which to generate the report.')
hours_report_parser.add_argument('--start', '-s', help = 'When to start the report. Defaults to today. YYYYMMDD format.')
hours_report_parser.add_argument('--end', '-e', help = 'When to end the report. Defaults to today. YYYYMMDD')
hours_report_parser.set_defaults(func = hours_report)


# The Parsening: Part Deux: The Reckoning.
args = parser.parse_args()
args.func(args)
