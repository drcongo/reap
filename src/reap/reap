#!/usr/bin/python

# Copyright 2012 Jake Basile
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from reap.commands.basic import *

# Parser Declarations
parser = argparse.ArgumentParser(
    description = 'A command line interface for the Harvest time tracking tool.'
)
subparsers = parser.add_subparsers()

# Login
login_parser = subparsers.add_parser(
    'login',
    help = 'Login to the command line utility.',
)
login_parser.add_argument('baseuri', help = 'The base URI you log in at. EX: https://companyname.harvestapp.com/')
login_parser.add_argument('username', help = 'Your email address.')
login_parser.set_defaults(func = login)

# Status
status_parser = subparsers.add_parser(
    'status',
    help = 'See your status for today and this week.',
)
status_parser.set_defaults(func = status)

# Bookmark
# bookmark_parser = subparsers.add_parser(
#     'bookmark',
#     help = 'Bookmark an entry so that it can be referred to more easily.',
# )
# bookmark_parser.add_argument('entryid', help = 'The entry ID.')
# bookmark_parser.add_argument('name', help = 'The bookmark name')
# bookmark_parser.set_defaults(func = bookmark)

# Bookmarks
# bookmarks_parser = subparsers.add_parser(
#     'bookmarks',
#     help = 'Displays all bookmarks',
# )
# bookmarks_parser.set_defaults(func = bookmarks)

# Start
start_parser = subparsers.add_parser(
    'start',
    help = 'Starts a timer. Will stop other timers automatically.',
)
start_parser.add_argument('entryid', help = 'The entry ID or bookmark to start the timer on.')
start_parser.set_defaults(func = start)

# Stop
stop_parser = subparsers.add_parser(
    'stop',
    help = 'Stops the current active timer.',
)
stop_parser.set_defaults(func = stop)

# List
list_parser = subparsers.add_parser(
    'list',
    help = 'Lists available projects and tasks.',
)
list_parser.set_defaults(func = list)

# Create
create_parser = subparsers.add_parser(
    'create',
    help = 'Creates a new entry.',
)
create_parser.add_argument('projectid', help = 'The project ID')
create_parser.add_argument('taskid', help = 'The task ID')
create_parser.add_argument('--time', '-t', help = 'Previously accrued time to add to the entry, in HH:MM format.')
create_parser.add_argument('--notes', '-n', help = 'Notes to set on the new entry.')
create_parser.set_defaults(func = create)

# Delete
delete_parser = subparsers.add_parser(
    'delete',
    help = 'Deletes an entry.'
)
delete_parser.add_argument('entryid', help = 'The entry ID or bookmark to delete.')
delete_parser.set_defaults(func = delete)

# Update
update_parser = subparsers.add_parser(
    'update',
    help = 'Updates an entry.'
)
update_parser.add_argument('entryid', help = 'The entry ID or bookmark to delete.')
update_parser.add_argument('--append', '-a', help = 'Causes note and time values to be added to current values instead of overwriting them.', action = 'store_true')
update_parser.add_argument('--notes', '-n', help = 'The notes to set on the entry. Will overwrite current note unless passed with append argument.')
update_parser.add_argument('--time', '-t', help = 'The accrued time to set on the entry. Will overwrite current time unless passed with append argument. In HH:MM format.')
update_parser.add_argument('--task', '-k', help = 'The project and task ID to set on the entry.', nargs = 2, metavar = ('PROJECTID', 'TASKID'))
update_parser.set_defaults(func = update)


# The Parsening!
args = parser.parse_args()
args.func(args)
