#!/usr/bin/python
# Copyright 2012 Jake Basile
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import argparse
from json import loads, dumps
from base64 import b64encode
from urllib2 import Request, urlopen
from keyring import set_password, get_password
from os.path import expanduser, exists
from pickle import dump, load
from re import compile, IGNORECASE

# Constants
STATUS_TASK_FORMAT = '''Project:    {entry[project]}
Task:       {entry[task]}
ID:         {entry[project_id]} {entry[task_id]}
Notes:      {entry[notes]}
Hours:      {entry[hours]}
'''

SELECT_TASK_FORMAT = '''{index}:    {project[name]}
            {task[name]}
'''

# Functions
def save_info(base_uri, username):
    with open(expanduser('~/.harvestrc'), 'w') as file:
        file.write(base_uri + '\n')
        file.write(username + '\n')

def load_info():
    with open(expanduser('~/.harvestrc'), 'r') as file:
        base_uri = file.readline().strip()
        username = file.readline().strip()
        return (base_uri, username)

def save_bookmarks(bookmarks):
    with open(expanduser('~/.harvestbkmrks'), 'w') as file:
        dump(bookmarks, file)

def load_bookmarks():
    path = expanduser('~/.harvestbkmrks')
    if exists(path):
        with open(path, 'r') as file:
            return load(file)
    else:
        return {}

def get_request(path):
    info = load_info()
    base_uri = info[0]
    username = info[1]
    passwd = get_password(base_uri, username)
    if passwd:
        auth = b64encode(username + ':' + passwd)
        uri = base_uri + path
        request = Request(uri)
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')
        request.add_header('Authorization', 'Basic ' + auth)
        return request
    else:
        print 'Login first!'
        return None

def get_task_info(query):
    # check for id in bookmarks first.
    bkmks = load_bookmarks()
    if bkmks.has_key(query):
        return bkmks[query]
    # If it's not there, get the full list and search it.
    request = get_request('daily')
    if request:
        response = urlopen(request)
        json = loads(''.join([line for line in response.readlines()]))
        projects = json['projects']
        q = compile(query, IGNORECASE)
        results = []
        for project in projects:
            for task in project['tasks']:
                matches = q.search(task['name'])
                if matches:
                    results += [(project, task)]
        # if there is only one search result, return it now.
        if len(results) is 1:
            return (results[0][0]['id'], results[0][1]['id'])
        # otherwise, ask the user.
        print '\nMore than one task found, please select task from list.\n'
        i = 1
        for project, task in results:
            print str.format(SELECT_TASK_FORMAT, project = project, task = task, index = i)
            i += 1
        selection = None
        while not selection:
            print 'Choose Wisely: ',
            input = raw_input()
            try:
                candidate = int(input) - 1
                if candidate >= 0 and candidate < len(results):
                    selection = candidate
                else:
                    print 'You have chosen... poorly.'
            except:
                print 'You have chosen... poorly.'
        return (results[selection][0]['id'], results[selection][1]['id'])

def get_entry(projectid, taskid):
    # im not really sure why this needs to happen.
    projectid = str(projectid)
    taskid = str(taskid)
    request = get_request('daily')
    if request:
        response = urlopen(request)
        json = loads(''.join([line for line in response.readlines()]))
        entries = json['day_entries']
        for entry in entries:
            if entry['project_id'] == projectid and entry['task_id'] == taskid:
                return entry
        # TODO: what about multiple entries with the same task info?

def login(args):
    base_uri = 'https://' + args.subdomain + '.harvestapp.com/'
    auth = b64encode(args.username + ':' + args.password)
    uri = base_uri + 'account/who_am_i'
    request = Request(uri)
    request.add_header('Content-Type', 'application/json')
    request.add_header('Accept', 'application/json')
    request.add_header('Authorization', 'Basic ' + auth)
    try:
        response = urlopen(request)
        set_password(base_uri, args.username, args.password)
        save_info(base_uri, args.username)
        print 'Success!'
    except:
        print 'Failure, check info and try again.'

def status(args):
    request = get_request('daily')
    if request:
        response = urlopen(request)
        json = loads(''.join([line for line in response.readlines()]))
        print '\nToday\'s Projects:'
        for entry in json['day_entries']:
            if entry.has_key('timer_started_at'):
                print '**Currently Running Timer**\n',
            print str.format(STATUS_TASK_FORMAT, entry = entry)

def bookmark(args):
    bookmarks = load_bookmarks()
    bookmarks[args.name] = (args.projectid, args.taskid)
    save_bookmarks(bookmarks)

def bookmarks(args):
    bookmarks = load_bookmarks()
    print '\nCurrent Bookmarks:'
    for key in bookmarks.keys():
        bkmk = bookmarks[key]
        print str.format('{}: P:[{}] T:[{}]', key, bkmk[0], bkmk[1])
    print ''

def note(args):
    task_info = get_task_info(args.task)
    entry = get_entry(task_info[0], task_info[1])
    if args.append:
        entry['notes'] = entry['notes'] + args.note
    else:
        entry['notes'] = args.note
    request = get_request('daily/update/' + str(entry['id']))
    request.add_data(dumps(entry))
    response = urlopen(request)
    if response.code == 200:
        print 'Success!'

def start(args):
    task_info = get_task_info(args.task)
    entry = get_entry(task_info[0], task_info[1])
    if not entry:
        # entry not found, need to create it.
        req = {
            'notes': '',
            'hours': '',
            'project_id': task_info[0],
            'task_id': task_info[1],
        }
        request = get_request('daily/add')
        request.add_data(dumps(req))
        response = urlopen(request)
        if response.code == 200:
            print 'Timer Started!'
    else:
        request = get_request('daily/timer/' + str(entry['id']))
        response = urlopen(request)
        if response.code == 200:
            print 'Timer Started!'

# Parser Declarations
parser = argparse.ArgumentParser(
    description = 'Harvest time-tracking from the command line!'
)
subparsers = parser.add_subparsers()

# Login
login_parser = subparsers.add_parser(
    'login',
    help = 'Login to the command line utility.',
)
login_parser.add_argument('username', help = 'Your email address.')
login_parser.add_argument('password', help = 'Your password.')
login_parser.add_argument('subdomain', help = 'The subdomain of harvestapp.com where you log in.')
login_parser.set_defaults(func = login)

# Status
status_parser = subparsers.add_parser(
    'status',
    help = 'See your status for today and this week.',
)
status_parser.set_defaults(func = status)

# Bookmark
bookmark_parser = subparsers.add_parser(
    'bookmark',
    help = 'Bookmark a project and task so that it can be referred to more easily.',
)
bookmark_parser.add_argument('projectid', help = 'The project ID.')
bookmark_parser.add_argument('taskid', help = 'The task ID.')
bookmark_parser.add_argument('name', help = 'The bookmark name')
bookmark_parser.set_defaults(func = bookmark)

# Bookmarks
bookmarks_parser = subparsers.add_parser(
    'bookmarks',
    help = 'Displays all bookmarks',
)
bookmarks_parser.set_defaults(func = bookmarks)

# Note
note_parser = subparsers.add_parser(
    'note',
    help = 'Adds or changes a note on a task.',
)
note_parser.add_argument('--append', '-a', action = 'store_true', help = 'Append to the current note instead of deleting')
note_parser.add_argument('task', help = 'The task name or bookmark to change the note on.')
note_parser.add_argument('note', help = 'The note text to change or append.')
note_parser.set_defaults(func = note)

# Start
start_parser = subparsers.add_parser(
    'start',
    help = 'Starts a timer. Will stop other timers automatically.',
)
start_parser.add_argument('task', help = 'The task name or bookmark to start the timer on.')
start_parser.set_defaults(func = start)

# The Parsening!
args = parser.parse_args()
args.func(args)
